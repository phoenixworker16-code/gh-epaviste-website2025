// Define a type for your `Demande` object.
// This interface should be the single source of truth for the Demande structure.
export interface Demande {
  id: string;
  nom: string;
  prenom: string;
  telephone: string;
  email: string;
  adresse: string;
  ville: string;
  codePostal: string;
  typeVehicule: string;
  marque: string;
  modele: string;
  annee: string;
  etatVehicule: string;
  description: string;
  dateCreation: string;
  statut: "Nouvelle" | "En cours" | "Planifi√©e" | "Termin√©e" | "Annul√©e";
  dateIntervention?: string | null;
  // Ajoutez ici d'autres propri√©t√©s si votre objet Demande en a r√©ellement
  // [key: string]: any; // D√©commenter si votre Demande peut avoir des propri√©t√©s arbitraires non d√©finies ci-dessus
}

/**
 * @class StorageManager
 * Gestionnaire centralis√© pour le stockage et la r√©cup√©ration des 'demandes' dans localStorage.
 * Impl√©mente le pattern Singleton pour garantir qu'une seule instance existe.
 * Notifie les √©couteurs enregistr√©s lors des changements de stockage.
 */
export class StorageManager {
  private static instance: StorageManager; // Instance statique pour le pattern Singleton
  private listeners: Set<() => void> = new Set(); // Set pour stocker les fonctions de rappel
  private storageKey = "demandes"; // Cl√© utilis√©e pour localStorage

  /**
   * Constructeur priv√© pour forcer le pattern Singleton.
   * Attache un √©couteur d'√©v√©nements 'storage' √† la fen√™tre si dans un environnement de navigateur.
   */
  private constructor() {
    // V√©rifier la disponibilit√© de `window` pour s'assurer que le code ne s'ex√©cute que dans un contexte de navigateur.
    if (typeof window !== "undefined") {
      // Binder `this` au gestionnaire pour s'assurer qu'il fait r√©f√©rence √† l'instance de la classe.
      window.addEventListener("storage", this.handleStorageChange.bind(this));
    }
  }

  /**
   * Retourne l'instance unique du StorageManager.
   * Cr√©e l'instance si elle n'existe pas d√©j√†.
   * @returns {StorageManager} L'instance singleton.
   */
  static getInstance(): StorageManager {
    if (!StorageManager.instance) {
      StorageManager.instance = new StorageManager();
    }
    return StorageManager.instance;
  }

  /**
   * G√®re l'√©v√©nement 'storage', d√©clench√© lorsque localStorage change dans un autre onglet/fen√™tre.
   * Notifie tous les √©couteurs enregistr√©s si le changement est pertinent pour `this.storageKey`.
   * @param {StorageEvent} e L'objet StorageEvent.
   */
  private handleStorageChange(e: StorageEvent): void {
    // Ne r√©agir qu'aux changements pour la storageKey sp√©cifique que nous g√©rons.
    if (e.key === this.storageKey) {
      // Journaliser la longueur de la nouvelle valeur pour un meilleur contexte en d√©veloppement.
      console.log("üîÑ Changement de stockage d√©tect√© (depuis un autre onglet/fen√™tre). Nouvelle longueur des donn√©es:", e.newValue?.length ?? 0);
      this.notifyListeners();
    }
  }

  /**
   * Enregistre une fonction de rappel √† notifier lorsque les donn√©es de stockage changent.
   * Retourne une fonction pour d√©sabonner l'√©couteur.
   * @param {() => void} callback La fonction √† appeler lorsque le stockage change.
   * @returns {() => void} Une fonction de nettoyage pour supprimer l'√©couteur.
   */
  addListener(callback: () => void): () => void {
    this.listeners.add(callback);
    // Retourner une fonction de nettoyage pour supprimer l'√©couteur du set.
    return () => {
      this.listeners.delete(callback);
    };
  }

  /**
   * Notifie tous les √©couteurs enregistr√©s d'un changement de stockage.
   * Inclut une gestion robuste des erreurs pour les rappels individuels des √©couteurs.
   */
  private notifyListeners(): void {
    this.listeners.forEach((callback) => {
      try {
        callback();
      } catch (error) {
        // Journaliser les erreurs dans les rappels des √©couteurs sans arr√™ter les autres √©couteurs.
        console.error("Erreur dans le rappel de l'√©couteur de stockage:", error);
      }
    });
  }

  /**
   * Sauvegarde une nouvelle 'demande' dans localStorage.
   * Ajoute la nouvelle demande √† la liste existante.
   * D√©clenche manuellement un `StorageEvent` pour notifier les autres onglets/fen√™tres.
   * @param {Demande} demande L'objet 'demande' √† sauvegarder.
   * @returns {boolean} Vrai si la sauvegarde a r√©ussi, faux sinon.
   */
  saveDemande(demande: Demande): boolean {
    if (typeof window === "undefined") {
      console.warn("Tentative de saveDemande dans un environnement non-navigateur. Op√©ration ignor√©e.");
      return false;
    }
    try {
      const existing = this.getAllDemandes(); // R√©cup√©rer les demandes existantes
      existing.push(demande); // Ajouter la nouvelle demande

      const newDemandesString = JSON.stringify(existing);
      const oldDemandesString = JSON.stringify(existing.slice(0, -1)); // Obtenir l'√©tat avant d'ajouter le nouveau

      localStorage.setItem(this.storageKey, newDemandesString);

      // Forcer la notification interne imm√©diatement apr√®s la sauvegarde.
      this.notifyListeners();

      // D√©clencher manuellement StorageEvent pour les autres onglets/fen√™tres si absolument n√©cessaire.
      // Un petit d√©lai peut √™tre utile pour laisser le navigateur traiter l'√©criture dans localStorage.
      setTimeout(() => {
        window.dispatchEvent(
          new StorageEvent("storage", {
            key: this.storageKey,
            newValue: newDemandesString,
            oldValue: oldDemandesString,
            url: window.location.href, // Ajouter l'URL actuelle pour l'exhaustivit√©
            storageArea: localStorage, // Sp√©cifier la zone de stockage
          }),
        );
      }, 0); // Utiliser 0ms pour la mise en file d'attente des microt√¢ches, ou supprimer setTimeout si non n√©cessaire.

      console.log("‚úÖ Demande sauvegard√©e. ID:", demande.id);
      return true;
    } catch (error) {
      console.error("‚ùå Erreur lors de la sauvegarde de la demande:", error);
      return false;
    }
  }

  /**
   * R√©cup√®re toutes les 'demandes' de localStorage.
   * @returns {Demande[]} Un tableau d'objets 'demande', ou un tableau vide si aucun trouv√© ou une erreur se produit.
   */
  getAllDemandes(): Demande[] {
    if (typeof window === "undefined") {
      console.warn("Tentative de getAllDemandes dans un environnement non-navigateur. Retourne un tableau vide.");
      return [];
    }
    try {
      const data = localStorage.getItem(this.storageKey);
      // S'assurer que JSON.parse g√®re null en toute s√©curit√© et retourne un tableau.
      // Ajouter une assertion de type pour une meilleure s√©curit√© si vous √™tes s√ªr de la structure.
      return data ? (JSON.parse(data) as Demande[]) : [];
    } catch (error) {
      console.error("‚ùå Erreur lors de la lecture des demandes depuis localStorage:", error);
      return []; // Retourner un tableau vide en cas d'erreur d'analyse pour √©viter d'autres probl√®mes.
    }
  }

  /**
   * Met √† jour une 'demande' existante dans localStorage par son ID.
   * @param {string} id L'ID de la 'demande' √† mettre √† jour.
   * @param {Partial<Demande>} updates Un objet contenant les propri√©t√©s √† mettre √† jour.
   * @returns {boolean} Vrai si la mise √† jour a r√©ussi, faux sinon.
   */
  updateDemande(id: string, updates: Partial<Demande>): boolean {
    if (typeof window === "undefined") {
      console.warn("Tentative de updateDemande dans un environnement non-navigateur. Op√©ration ignor√©e.");
      return false;
    }
    try {
      const demandes = this.getAllDemandes();
      const index = demandes.findIndex((d) => d.id === id);

      if (index !== -1) {
        // Cr√©er un nouvel objet pour assurer l'immuabilit√© et d√©clencher les mises √† jour correctement.
        demandes[index] = { ...demandes[index], ...updates };
        localStorage.setItem(this.storageKey, JSON.stringify(demandes));
        this.notifyListeners(); // Notifier les √©couteurs dans l'onglet actuel
        console.log(`‚úÖ Demande mise √† jour: ID ${id}`);
        return true;
      }
      console.warn(`‚ö†Ô∏è Demande avec l'ID ${id} non trouv√©e pour la mise √† jour.`);
      return false;
    } catch (error) {
      console.error("‚ùå Erreur lors de la mise √† jour de la demande:", error);
      return false;
    }
  }

  /**
   * Supprime une 'demande' de localStorage par son ID.
   * @param {string} id L'ID de la 'demande' √† supprimer.
   * @returns {boolean} Vrai si la suppression a r√©ussi, faux sinon.
   */
  deleteDemande(id: string): boolean {
    if (typeof window === "undefined") {
      console.warn("Tentative de deleteDemande dans un environnement non-navigateur. Op√©ration ignor√©e.");
      return false;
    }
    try {
      const demandes = this.getAllDemandes();
      const filtered = demandes.filter((d) => d.id !== id);

      // Ne mettre √† jour que si quelque chose a √©t√© r√©ellement supprim√© pour √©viter les √©critures inutiles.
      if (filtered.length < demandes.length) {
        localStorage.setItem(this.storageKey, JSON.stringify(filtered));
        this.notifyListeners(); // Notifier les √©couteurs dans l'onglet actuel
        console.log(`‚úÖ Demande supprim√©e: ID ${id}`);
        return true;
      }
      console.warn(`‚ö†Ô∏è Demande avec l'ID ${id} non trouv√©e pour la suppression.`);
      return false;
    } catch (error) {
      console.error("‚ùå Erreur lors de la suppression de la demande:", error);
      return false;
    }
  }

  /**
   * Efface toutes les 'demandes' de localStorage.
   */
  clearAll(): void {
    if (typeof window === "undefined") {
      console.warn("Tentative de clearAll dans un environnement non-navigateur. Op√©ration ignor√©e.");
      return;
    }
    try {
      localStorage.setItem(this.storageKey, "[]");
      this.notifyListeners(); // Notifier les √©couteurs dans l'onglet actuel
      console.log("üóëÔ∏è Toutes les demandes ont √©t√© effac√©es.");
    } catch (error) {
      console.error("‚ùå Erreur lors de l'effacement de toutes les demandes:", error);
    }
  }

  /**
   * Nettoie l'√©couteur d'√©v√©nements de stockage lorsque le gestionnaire n'est plus n√©cessaire.
   * Ceci est important dans les frameworks comme React o√π les composants montent/d√©montent.
   */
  destroy(): void {
    if (typeof window !== "undefined") {
      window.removeEventListener("storage", this.handleStorageChange.bind(this));
    }
    this.listeners.clear(); // Effacer tous les √©couteurs
  }
}
